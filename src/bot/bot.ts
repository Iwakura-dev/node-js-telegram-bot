import 'dotenv/config';
import {
  Bot,
  Context,
  GrammyError,
  HttpError,
  InlineKeyboard,
  Keyboard,
} from 'grammy';
import { rootKeyboard, vacancyKeyboard } from '../menu/menu';
// import { sendHHVacancies } from '../utils/utils';

const token = process.env.API_TOKEN_TELEGRAM_BOT ?? '';

const bot = new Bot(token);

let subscriptions: Record<string, string[]> = {};
let lastRequestTime: Record<string, number> = {};

bot.command('start', async (ctx: Context) => {
  await ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç!\n–¢—ã –≤—Å–µ-—Ç–∞–∫–∏ —Ä–µ—à–∏–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —á–∞—Å—ã?\n–¢–æ–≥–¥–∞ —Å–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π —Å–≤–æ—ë –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–ª–µ–¥–∏ –∑–∞ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ —Å —Å–∞–π—Ç–∞ <b>HeadHunter.ru</b>',
    {
      reply_markup: rootKeyboard,
      parse_mode: 'HTML',
    },
  );
});

bot.on(':text', async (ctx: Context) => {
  switch (ctx.msg?.text) {
    case '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
      await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã!',
        {
          reply_markup: vacancyKeyboard,
        },
      );
      break;
    case '–ù–∞–∑–∞–¥':
      await ctx.reply('–í—ã—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
        reply_markup: rootKeyboard,
      });
      break;
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling input ${ctx.update.update_id}`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error('Error in request', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not contact Telegram', e);
  } else {
    console.error('Unknown error', e);
  }
});

bot.start();
